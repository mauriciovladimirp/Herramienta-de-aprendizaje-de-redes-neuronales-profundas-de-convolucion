ccopy_reg
_reconstructor
p1
(c__main__
LeNetConvPoolLayer
p2
c__builtin__
object
p3
NtRp4
(dp5
S'input'
p6
g1
(ctheano.tensor.var
TensorVariable
p7
g3
NtRp8
(dp9
S'auto_name'
p10
S'auto_310450'
p11
sS'index'
p12
I0
sS'tag'
p13
(itheano.gof.utils
scratchpad
p14
(dp15
S'trace'
p16
(lp17
(lp18
(S'<stdin>'
p19
I1
S'<module>'
p20
Ntp21
a(S'/usr/lib/python2.7/dist-packages/spyderlib/widgets/externalshell/sitecustomize.py'
p22
I699
S'runfile'
p23
S'execfile(filename, namespace)'
tp24
a(S'/usr/lib/python2.7/dist-packages/spyderlib/widgets/externalshell/sitecustomize.py'
p25
I81
S'execfile'
p26
S'builtins.execfile(filename, *where)'
tp27
a(S'/home/mauricio/Documentos/Doctorado_Python/DeepLearningTutorials/code/CNN_MLP.py'
p28
I425
g20
S'evaluate_lenet5()'
tp29
a(S'/home/mauricio/Documentos/Doctorado_Python/DeepLearningTutorials/code/CNN_MLP.py'
p30
I185
S'evaluate_lenet5'
p31
S'layer0_input = x.reshape((batch_size, 1, 28, 28))'
tp32
aasbsS'name'
p33
NsS'owner'
p34
g1
(ctheano.gof.graph
Apply
p35
g3
NtRp36
(dp37
S'inputs'
p38
(lp39
g1
(g7
g3
NtRp40
(dp41
g10
S'auto_310447'
p42
sg12
Nsg13
(itheano.gof.utils
scratchpad
p43
(dp44
g16
(lp45
(lp46
(g19
I1
g20
Ntp47
a(g22
I699
g23
S'execfile(filename, namespace)'
tp48
a(g25
I81
g26
S'builtins.execfile(filename, *where)'
tp49
a(g28
I425
g20
S'evaluate_lenet5()'
tp50
a(g30
I173
g31
S"x = T.matrix('x')   # the data is presented as rasterized images"
tp51
aasbsg33
S'x'
sg34
NsS'type'
p52
g1
(ctheano.tensor.type
TensorType
p53
g3
NtRp54
(dp55
S'broadcastable'
p56
(I00
I00
tp57
sS'dtype'
p58
S'float64'
p59
sS'numpy_dtype'
p60
cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p63
I00
sg33
Nsbsbag1
(ctheano.tensor.var
TensorConstant
p64
g3
NtRp65
(dp66
g10
S'auto_310449'
p67
sg12
Nsg13
(itheano.gof.utils
scratchpad
p68
(dp69
S'unique_value'
p70
Nsbsg33
Nsg52
g1
(g53
g3
NtRp71
(dp72
g56
(I00
tp73
sg58
S'int64'
p74
sg60
g61
(S'i8'
I0
I1
tRp75
(I3
S'<'
NNNI-1
I-1
I0
tbsg63
I00
sg33
NsbsS'data'
p76
cnumpy.core.multiarray
_reconstruct
p77
(cnumpy
ndarray
p78
(I0
tS'b'
tRp79
(I1
(I4
tg75
I00
S'\xf4\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00'
tbsbasg13
(itheano.gof.utils
scratchpad
p80
(dp81
bsS'outputs'
p82
(lp83
g8
asS'op'
p84
g1
(ctheano.tensor.basic
Reshape
p85
g3
NtRp86
(dp87
S'ndim'
p88
I4
sS'_op_use_c_code'
p89
S'/usr/bin/g++'
p90
sg33
Nsbsbsg52
g1
(g53
g3
NtRp91
(dp92
g56
(I00
I01
I00
I00
tp93
sg58
g59
sg60
g62
sg63
I00
sg33
NsbsbsS'b'
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p94
g3
NtRp95
(dp96
g10
S'auto_310452'
p97
sg12
Nsg13
(itheano.gof.utils
scratchpad
p98
(dp99
g16
(lp100
(lp101
(g19
I1
g20
Ntp102
a(g22
I699
g23
S'execfile(filename, namespace)'
tp103
a(g25
I81
g26
S'builtins.execfile(filename, *where)'
tp104
a(g28
I425
g20
S'evaluate_lenet5()'
tp105
a(g30
I196
g31
S'poolsize=(2, 2)'
tp106
a(S'/home/mauricio/Documentos/Doctorado_Python/DeepLearningTutorials/code/CNN_MLP.py'
p107
I103
S'__init__'
p108
S"self.b = theano.shared(value=b_values,name='b', borrow=True)"
tp109
aasbsS'container'
p110
g1
(ctheano.gof.link
Container
p111
g3
NtRp112
(dp113
g33
S'b'
sS'storage'
p114
(lp115
g77
(g78
(I0
tS'b'
tRp116
(I1
(I2
tg62
I00
S'\x93\xa6ol\x9d\\\xb0\xbf\x98\x15,4(\xc4\xe8\xbf'
tbasS'strict'
p117
I00
sS'readonly'
p118
I00
sg52
g1
(g53
g3
NtRp119
(dp120
g56
(I00
tp121
sg58
S'float64'
p122
sg60
g62
sg63
I00
sg33
NsbsS'allow_downcast'
p123
Nsbsg33
S'b'
sg34
Nsg52
g119
sbsS'params'
p124
(lp125
g1
(g94
g3
NtRp126
(dp127
g10
S'auto_310451'
p128
sg12
Nsg13
(itheano.gof.utils
scratchpad
p129
(dp130
g16
(lp131
(lp132
(g19
I1
g20
Ntp133
a(g22
I699
g23
S'execfile(filename, namespace)'
tp134
a(g25
I81
g26
S'builtins.execfile(filename, *where)'
tp135
a(g28
I425
g20
S'evaluate_lenet5()'
tp136
a(g30
I196
g31
S'poolsize=(2, 2)'
tp137
a(g107
I98
g108
S'borrow=True'
tp138
aasbsg110
g1
(g111
g3
NtRp139
(dp140
g33
S'W'
sg114
(lp141
g77
(g78
(I0
tS'b'
tRp142
(I1
(I2
I1
I5
I5
tg62
I00
S'/\xa83\xf2\xf5\xbd\xba?\x80\x8dh\xd2\xce^\xd7\xbf8\xe9\xdf\xdfKH\xb1?\x1f\x15K\x96A\xd6\xb6\xbf\x18\xcd\xe8M\xccJ\xb0?\xddoHTP\x94\xa1\xbf=\xef\x95\xb4\xe9B\xc6\xbf\xffx\x91\xec8)\xd1\xbf\xa5\x81\x15\xd0\x8dw\xd4?z\xc9\xac\xb8\xc7\\\xd3\xbf\x01\xf1\xecHs\x81\xbc\xbf\xf2\x91\r\xbb\t\xd1\x94\xbf\xb34\xebv_8\xcb?|\xd7\x0fo%\\\xb3\xbf{\x19\x1d\x95\xa8\xce\xe2?\xe7d7_\xe9f\xc0?O\xc5\xdd\xce\xefY\xd5\xbf\xca\x1c\xe2\x13.\x9a\xdd?/lGh\xe8\xa4\xa4?&|\x95{Y`\xbb?\xac&U\x17,\xea\xc7\xbf\xbeu\xfc\x9e\xed\xc5\x9b?\x89H%u\xc0\xe3\xcc?\x7f\xdc\x19Q\xac\xa0\xdf?<E\x83H6e\xdc?\x848\xc1\x08\xb2@\xbd\xbf\xea_\xd8\xfd\xa2\xc3\xd1\xbf\xf7\xa5|\xed\xd4\x1d\xd4??J\xda\xf6e*\xc0\xbf\x014\xadC<\xd6\xd4?\xd6o\x19\xca\xdc\xf3\xb3?\xb1\x95\x85\xbaH\xd6\xd4?\r\x1a\xba\x9e\xebT\xc0\xbfu\x86I3\x156\xe1?\n\x8b;\xf3B\x8b\xc4?m\xfe\rU\x16&\xb7\xbf\x91\x99"\xc527\xa3\xbf\xac\x1a\xfax\x82\x9e\xdf?\xc6\xaf\xc6)\xecN\xd7?\xb4\x8bQ\x03\xb5\xa7\xdd?\x8f\x8f\xb2q\x95\xfa\xae?T\xc9\xb3X\xc6\x18\xd4\xbf\t|$6L\x8b\xbb?\xd6\x03of\x19=\xc3\xbf\xbf\xd2\xce\xfb\x00\x0f\xd9?\xb6\x1d4"\x89\r\xd0\xbf\xd1\xaf\xbeyl\xc0\xd3\xbf\x05k\x0c(q\x84\xb5\xbfc\xb8\xdf\x02\xfdh\xc2?\x11\x9dN3\xe3\x10\xc5?'
tbasg117
I00
sg118
I00
sg52
g1
(g53
g3
NtRp143
(dp144
g56
(I00
I00
I00
I00
tp145
sg58
S'float64'
p146
sg60
g62
sg63
I00
sg33
Nsbsg123
Nsbsg33
S'W'
sg34
Nsg52
g143
sbag95
asS'W'
g126
sS'output'
p147
g1
(g7
g3
NtRp148
(dp149
g10
S'auto_310462'
p150
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p151
(dp152
g16
(lp153
(lp154
(g19
I1
g20
Ntp155
a(g22
I699
g23
S'execfile(filename, namespace)'
tp156
a(g25
I81
g26
S'builtins.execfile(filename, *where)'
tp157
a(g28
I425
g20
S'evaluate_lenet5()'
tp158
a(g30
I196
g31
S'poolsize=(2, 2)'
tp159
a(g107
I125
g108
S"self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))"
tp160
aasbsg33
Nsg34
g1
(g35
g3
NtRp161
(dp162
g38
(lp163
g1
(g7
g3
NtRp164
(dp165
g10
S'auto_310459'
p166
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p167
(dp168
g16
(lp169
(lp170
(g19
I1
g20
Ntp171
a(g22
I699
g23
S'execfile(filename, namespace)'
tp172
a(g25
I81
g26
S'builtins.execfile(filename, *where)'
tp173
a(g28
I425
g20
S'evaluate_lenet5()'
tp174
a(g30
I196
g31
S'poolsize=(2, 2)'
tp175
a(g107
I125
g108
S"self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))"
tp176
aasbsg33
Nsg34
g1
(g35
g3
NtRp177
(dp178
g38
(lp179
g1
(g7
g3
NtRp180
(dp181
g10
S'auto_310454'
p182
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p183
(dp184
g16
(lp185
(lp186
(g19
I1
g20
Ntp187
a(g22
I699
g23
S'execfile(filename, namespace)'
tp188
a(g25
I81
g26
S'builtins.execfile(filename, *where)'
tp189
a(g28
I425
g20
S'evaluate_lenet5()'
tp190
a(g30
I196
g31
S'poolsize=(2, 2)'
tp191
a(g107
I118
g108
S'ignore_border=True'
tp192
aasbsg33
Nsg34
g1
(g35
g3
NtRp193
(dp194
g38
(lp195
g1
(g7
g3
NtRp196
(dp197
g10
S'auto_310453'
p198
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p199
(dp200
g16
(lp201
(lp202
(g19
I1
g20
Ntp203
a(g22
I699
g23
S'execfile(filename, namespace)'
tp204
a(g25
I81
g26
S'builtins.execfile(filename, *where)'
tp205
a(g28
I425
g20
S'evaluate_lenet5()'
tp206
a(g30
I196
g31
S'poolsize=(2, 2)'
tp207
a(g107
I111
g108
S'input_shape=image_shape'
tp208
aasbsg33
Nsg34
g1
(g35
g3
NtRp209
(dp210
g38
(lp211
g8
ag126
asg13
(itheano.gof.utils
scratchpad
p212
(dp213
bsg82
(lp214
g196
asg84
g1
(ctheano.tensor.nnet.abstract_conv
AbstractConv2d
p215
g3
NtRp216
(dp217
S'imshp'
p218
(I500
I1
I28
I28
tp219
sS'filter_flip'
p220
I01
sS'kshp'
p221
(I2
I1
I5
I5
tp222
sS'subsample'
p223
(I1
I1
tp224
sg89
g90
sS'border_mode'
p225
S'valid'
p226
sbsbsg52
g1
(g53
g3
NtRp227
(dp228
g56
(I00
I00
I00
I00
tp229
sg58
g59
sg60
g62
sg63
I00
sg33
Nsbsbasg13
(itheano.gof.utils
scratchpad
p230
(dp231
bsg82
(lp232
g180
asg84
g1
(ctheano.tensor.signal.pool
Pool
p233
g3
NtRp234
(dp235
S'st'
p236
(I2
I2
tp237
sS'padding'
p238
(I0
I0
tp239
sS'mode'
p240
S'max'
p241
sS'ignore_border'
p242
I01
sg89
g90
sS'ds'
p243
g237
sbsbsg52
g1
(g53
g3
NtRp244
(dp245
g56
(I00
I00
I00
I00
tp246
sg58
g59
sg60
g62
sg63
I00
sg33
Nsbsbag1
(g7
g3
NtRp247
(dp248
g10
S'auto_310455'
p249
sg12
I0
sg13
(itheano.gof.utils
scratchpad
p250
(dp251
g16
(lp252
(lp253
(g19
I1
g20
Ntp254
a(g22
I699
g23
S'execfile(filename, namespace)'
tp255
a(g25
I81
g26
S'builtins.execfile(filename, *where)'
tp256
a(g28
I425
g20
S'evaluate_lenet5()'
tp257
a(g30
I196
g31
S'poolsize=(2, 2)'
tp258
a(g107
I125
g108
S"self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))"
tp259
aasbsg33
Nsg34
g1
(g35
g3
NtRp260
(dp261
g38
(lp262
g95
asg13
(itheano.gof.utils
scratchpad
p263
(dp264
bsg82
(lp265
g247
asg84
g1
(ctheano.tensor.elemwise
DimShuffle
p266
g3
NtRp267
(dp268
S'drop'
p269
(lp270
sS'shuffle'
p271
(lp272
I0
asS'augment'
p273
(lp274
I0
aI2
aI3
asS'input_broadcastable'
p275
(I00
tp276
sS'inplace'
p277
I00
sS'new_order'
p278
(S'x'
I0
S'x'
S'x'
tp279
sg89
g90
sbsbsg52
g1
(g53
g3
NtRp280
(dp281
g56
(I01
I00
I01
I01
tp282
sg58
g122
sg60
g62
sg63
I00
sg33
Nsbsbasg13
(itheano.gof.utils
scratchpad
p283
(dp284
bsg82
(lp285
g164
asg84
g1
(ctheano.tensor.elemwise
Elemwise
p286
g3
NtRp287
(dp288
S'__module__'
p289
S'tensor'
p290
sS'scalar_op'
p291
g1
(ctheano.scalar.basic
Add
p292
g3
NtRp293
(dp294
S'output_types_preference'
p295
ctheano.scalar.basic
upcast_out
p296
sg89
g90
sg33
S'add'
p297
sbsg33
S'Elemwise{add,no_inplace}'
p298
sg89
g90
sS'destroy_map'
p299
(dp300
sS'nfunc_spec'
p301
(S'add'
p302
I2
I1
tp303
sS'inplace_pattern'
p304
(dp305
sS'openmp'
p306
I00
sS'__doc__'
p307
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p308
sbsbsg52
g1
(g53
g3
NtRp309
(dp310
g56
(I00
I00
I00
I00
tp311
sg58
g59
sg60
g62
sg63
I00
sg33
Nsbsbasg13
(itheano.gof.utils
scratchpad
p312
(dp313
bsg82
(lp314
g148
asg84
g1
(g286
g3
NtRp315
(dp316
g289
g290
sg291
g1
(ctheano.scalar.basic
Tanh
p317
g3
NtRp318
(dp319
g295
ctheano.scalar.basic
upgrade_to_float
p320
sg89
g90
sg33
S'tanh'
p321
sbsg33
S'Elemwise{tanh,no_inplace}'
p322
sg89
g90
sg299
(dp323
sg301
(S'tanh'
I1
I1
tp324
sg304
(dp325
sg306
I00
sg307
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p326
sbsbsg52
g1
(g53
g3
NtRp327
(dp328
g56
(I00
I00
I00
I00
tp329
sg58
g59
sg60
g62
sg63
I00
sg33
Nsbsbsb.